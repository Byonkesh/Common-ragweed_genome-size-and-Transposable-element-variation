Characterization of TE:

# Filtration of Scaffolds which are not in the new reference genome:

awk 'NR==FNR {keep[$1]; next} $2 in keep' ~/om62_scratch2/aa_2025/ref/aa_2025_str_end.txt ~/ha22_scratch/edta-ragweed/superfamilies_nonoverlapping.ragweed_simple_rRNA_TEs.sorted.minlength20.saf.txt > filtered_TE_saf.txt

(base) [bnongtho@m3-login3 ragweed_trial]$ cut -f2 filtered_TE_saf.txt | sort | uniq | wc
     49      49     285
(base) [bnongtho@m3-login3 ragweed_trial]$ cut -f1 ~/om62_scratch2/aa_2025/ref/aa_2025_str_end.txt | sort | uniq | wc
     51      51     297


# Calculation of TE Percentage in the genome:
library(readr)
filtered_TE_saf <- read_delim("~/Documents/genome size estimation/TE characterisation/filtered_TE_saf.txt", 
    delim = "\t", escape_double = FALSE, 
    col_names = FALSE, trim_ws = TRUE)
View(filtered_TE_saf)
# Step 1: Convert Start and End columns to numeric
filtered_TE_saf$Start <- as.numeric(filtered_TE_saf$Start)
filtered_TE_saf$End <- as.numeric(filtered_TE_saf$End)

# Step 2: Calculate TE length for each row
filtered_TE_saf$TE_LENGTH <- filtered_TE_saf$End - filtered_TE_saf$Start + 1

# Step 3: Set total genome length (in base pairs) 
total_genome_length <- 1059918188. # 1114937637bp - chloro and mito TE length  # 1.11 Gbp (use hap1).

# Step 4: Summarize total TE length and percentage per Repeat_type
library(dplyr)

te_lengths_summary <- filtered_TE_saf %>%
  group_by(Repeat_type) %>%
  summarise(Total_TE_Length = sum(TE_LENGTH), .groups = "drop") %>%
  mutate(Percentage = (Total_TE_Length / total_genome_length) * 100) %>%
  arrange(desc(Percentage))

# Step 5: Print the summary
print(te_lengths_summary)

# A tibble: 14 × 3
   Repeat_type       Total_TE_Length Percentage
   <chr>                       <dbl>      <dbl>
 1 LTR/Copia               185381363  17.5     
 2 nonTIR/helitron         173883500  16.4     
 3 LTR/Gypsy               134437654  12.7     
 4 LTR/unknown             128185411  12.1     
 5 TIR/Mutator              51349641   4.84    
 6 TIR/hAT                  29384504   2.77    
 7 TIR/CACTA                14726602   1.39    
 8 TIR/PIF_Harbinger         7400235   0.698   
 9 Simple_repeat             5916485   0.558   
10 TIR/Tc1_Mariner           1280986   0.121   
11 Low_complexity            1117055   0.105   
12 8s_rRNA                    381474   0.0360  
13 28s_rRNA                    28522   0.00269 
14 18s_rRNA                     7240   0.000683


library(readxl)
Copia <- read_excel("~/Documents/Ragweed data /TE_coverage_data/Copia.xlsx")
View(Copia)

library(dplyr)
# Count number of TEs per Repeat_type
te_type_counts <- filtered_TE_saf %>%
+   count(Repeat_type, name = "TE_count") %>%
+   arrange(desc(TE_count))  # Optional: sort by count
# View the result
print(te_type_counts)
# A tibble: 14 × 2
   Repeat_type       TE_count
   <chr>                <int>
 1 nonTIR/helitron     472715
 2 LTR/unknown         200995
 3 LTR/Copia           154857
 4 TIR/Mutator         133124
 5 Simple_repeat       131479
 6 LTR/Gypsy           105299
 7 TIR/hAT              87620
 8 TIR/CACTA            44195
 9 TIR/PIF_Harbinger    22768
10 Low_complexity       22652
11 TIR/Tc1_Mariner       4857
12 8s_rRNA               3317
13 28s_rRNA                 5
14 18s_rRNA                 4

# Ploting of Fig.1 : 
library(ggplot2)
library(dplyr)
library(cowplot)
library(scales)  # make sure this is loaded for number_format()
library(ggforce)

# Your new data (example, replace with your actual data)
te_data <- tibble::tribble(
  ~Repeat_type, ~Total_TE_Length, ~Percentage,
  "LTR/Copia", 185381363, 17.5,
  "nonTIR/helitron", 173883500, 16.4,
  "LTR/Gypsy", 134437654, 12.7,
  "LTR/unknown", 128185411, 12.1,
  "TIR/Mutator", 51349641, 4.84,
  "TIR/hAT", 29384504, 2.77,
  "TIR/CACTA", 14726602, 1.39,
  "TIR/PIF_Harbinger", 7400235, 0.698,
  "TIR/Tc1_Mariner", 1280986, 0.121
)

# Define colors for repeat types
# Adding colors for the new repeat types (Simple_repeat, Low_complexity)
te_colors <- c(
  "LTR/Copia" = "#a6cee3",
  "LTR/Gypsy" = "#1f78b4",
  "TIR/CACTA" = "yellow",
  "TIR/hAT" = "#e31a1c",
  "nonTIR/helitron" = "#33a02c",
  "LTR/unknown" = "#b2df8a",
  "TIR/PIF_Harbinger" = "#8c510a",
  "TIR/Mutator" = "#fdbf6f",
  "TIR/Tc1_Mariner" = "black"
)

# To keep the order consistent, convert Repeat_type to factor with levels ordered by Percentage descending
te_data <- te_data %>%
  arrange(desc(Percentage)) %>%
  mutate(Repeat_type = factor(Repeat_type, levels = Repeat_type))

# Plot of Fig. 1A:
PlotA <- ggplot(te_data, aes(x = Percentage, y = Repeat_type, fill = Repeat_type)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(round(Percentage, 2), "%")),
            nudge_x = 1, size = 4, hjust = 0) +
  labs(x = "TE Percentage of Genome (%)", y = "TE class", fill = "TE Type") +
  scale_fill_manual(values = te_colors) +
  theme_minimal() +
  theme(
    plot.margin = margin(10, 10, 10, 10),
    panel.border = element_rect(color = "black", fill = NA, size = 0.5),
    axis.text.x = element_text(hjust = 1),
    legend.position = "none",
    axis.ticks.x = element_line(color = "black"),
    axis.ticks.y = element_line(color = "black"),
    axis.line.x = element_line(color = "black"),
    axis.line.y = element_line(color = "black")
  ) +
  scale_x_continuous(expand = expansion(mult = c(0, 0.15))) # Add space for text on the right

print(PlotA)

# Create the data frame with updated column names
te_data <- data.frame(
  TE_Class = c("Copia", "Gypsy", "Unknown", "Helitron", "CACTA", "hAT", "Mutator", "Harbinger", "Tc1mariner"),
  mean_TE_length = c(1197, 1277, 638, 368, 333, 335, 386, 325, 265),
  sd_TE_length = c(1862, 2002, 1044, 555, 450, 618, 938, 396, 268),
  se_TE_length = c(4.73, 6.17, 2.33, 0.803, 2.14, 2.09, 2.57, 2.63, 3.84),
  mean_distance = c(71776, 60417, 55615, 35058, 36596, 25252, 229273, 64996, 24541),
  sd_distance = c(132399, 124052, 111666, 85645, 96459, 62292, 363265, 190622, 52633),
  se_distance = c(336, 382, 249, 124, 459, 210, 995, 1263, 755),
  TE_counts = c(154857, 105299, 200995, 472715, 44195, 87620, 133124, 22768, 4857)
)

# Print the data frame
print(te_data)

# Convert mean_distance and se_distance from bp to Mbp for plotting
combined_te <- te_data %>%
  mutate(
    mean_distance_Mbp = mean_distance / 1e6,
    se_distance_Mbp = se_distance / 1e6
  )
print(combined_te)
# Plot: Distance to nearest gene (Mbp)
PlotB <- ggplot(combined_te, aes(y = TE_Class, x = mean_distance_Mbp, color = TE_Class)) + 
  geom_point(size = 1.5) +  
  geom_errorbarh(aes(xmin = mean_distance_Mbp - se_distance_Mbp, 
                     xmax = mean_distance_Mbp + se_distance_Mbp), 
                 height = 0.8, color = "#bebada") +  
  labs(x = "Distance to Nearest Gene (Mbp)", y = "TE Class") +  
  scale_color_manual(values = te_colors) +  
  theme_minimal() +  
  theme(
    plot.margin = margin(10, 10, 10, 10),
    panel.border = element_rect(color = "black", fill = NA, size = 0.5),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.text.x = element_text(size = 10),
    axis.ticks.x = element_line(color = "black"),
    legend.position = "none"
  )
print(PlotB)
# Plot: TE length (bp)
PlotC <- ggplot(combined_te, aes(y = TE_Class, x = mean_TE_length, color = TE_Class)) +
  geom_point(size = 1.5) +
  geom_errorbar(aes(xmin = mean_TE_length - se_TE_length, 
                    xmax = mean_TE_length + se_TE_length), 
                color = "#bebada") +
  labs(x = "TE length (bp)") +
  scale_color_manual(values = te_colors) +  
  theme_minimal() +
  theme(
    plot.margin = margin(10, 10, 10, 10),
    panel.border = element_rect(color = "black", fill = NA, size = 0.5),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.text.x = element_text(size = 10),
    axis.ticks.x = element_line(color = "black"),
    legend.position = "none"
  )

# Plot: TE number
PlotD <- ggplot(combined_te, aes(y = TE_Class, x = TE_counts, color = TE_Class)) +
  geom_point(size = 1.5) +
  labs(x = "TE number") +
  scale_color_manual(values = te_colors) +  
  theme_minimal() +
  theme(
    plot.margin = margin(10, 10, 10, 10),
    panel.border = element_rect(color = "black", fill = NA, size = 0.5),
    axis.text.y = element_blank(),
    axis.text.x = element_text(size = 10),
    axis.ticks.x = element_line(color = "black"),
    axis.title.y = element_blank(),
    legend.position = "none"
  )

# Combine the plots into a single row (replace PlotA with your actual first plot if needed)
Plot1 <- plot_grid(
  PlotA, PlotB, PlotD, PlotC,
  label_size = 10,
  nrow = 1,
  align = "h",
  rel_widths = c(7, 2.8, 3.3, 3),
  hjust = -1
)

print(Plot1)
# Plot of Fig. 1B:
# Skip hap1dat11 since it has 0 rows
hap1dat10 <- hap1dat10 %>% rename(rRNA_density = `8s_rRNA`)
hap1dat12 <- hap1dat12 %>% rename(rRNA_density = `28s_rRNA`)

# Combine only non-empty data frames
combined_hap <- bind_rows(hap1dat10, hap1dat12)

# Ensure LOC is numeric in both
all_hap_data$LOC <- as.numeric(all_hap_data$LOC)
combined_hap$LOC <- as.numeric(combined_hap$LOC)

# Merge by CHR and LOC
merged_data <- merge(all_hap_data[, c("CHR", "LOC")],
                     combined_hap[, c("CHR", "LOC", "rRNA_density")],
                     by = c("CHR", "LOC"))
str(merged_data)
# Plot
# Merge by CHR and LOC (assuming LOC matches)
combined_plot_data <- merge(all_hap_data, merged_data[, c("CHR", "LOC", "rRNA_density")], by = c("CHR", "LOC"), all.x = TRUE)

library(ggplot2)
library(ggforce)

Plot2 = ggplot(combined_plot_data, aes(x = LOCc / 1e6)) +
  geom_segment(aes(x = LOCc / 1e6, xend = LOCc / 1e6, y = 0, yend = rRNA_density), color = "#636363") +
  geom_point(aes(y = rRNA_density), color = "#636363", size = 2) +
  ggforce::facet_row(~ CHR, scales = "free_x", space = "free") +
  theme_minimal() +
  labs(
    x = NULL,
    y = "rRNA Density"
  ) +
  theme(
    strip.text = element_text(size = 10),        # Show chromosome labels
    strip.background = element_rect(color = "black", fill = "white", size = 0.5),  # Border around chromosome names
    axis.text.x = element_blank(),                             # Keep x-axis text blank
    panel.spacing = unit(0.5, "lines"),
    panel.grid = element_blank(),
    panel.border = element_blank(),
    axis.line.x = element_line(color = "black"),
    axis.ticks.y = element_line(color = "black"),
    axis.line.y = element_line(color = "black")
  )

print(Plot2)

# Plot of Fig. 1C:
# Convert TE_Type to factor with specified order
all_hap_data$TE_type <- factor(all_hap_data$TE_type, levels = te_order)
# Ensure CHR is a factor in order
all_hap_data$CHR <- factor(all_hap_data$CHR, levels = paste0("h1s", 1:18))

# In your ggplot, map color to TE_Type and apply scale manually:
Plot3 = ggplot(all_hap_data, aes(x = LOC / 1e6, y = TE_density, color = TE_type)) +
  geom_line(size = 0.5) +
  ggforce::facet_row(~ CHR, scales = "free_x", space = "free") +
  scale_color_manual(values = te_colors, name = "TE Type") +
  theme_minimal() +
  labs(
    x = "Genomic Position (Mbp)",
    y = "TE Density"
  ) +
  theme(
    strip.text = element_blank(),           # removes chromosome names in facet strips
    axis.text.x = element_text(angle = 90, hjust = 1, size = 7),
    panel.spacing = unit(0.5, "lines"),
    panel.grid = element_blank(),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black"),
    axis.line = element_line(color = "black"),
    legend.position = "none"  # remove legend, keep if needed
  )

print(Plot3)

# one digit after decimal in Plot3
Plot3 <- Plot3 + 
  scale_y_continuous(labels = number_format(accuracy = 0.01))  # one digit after decimal
# Plotting the combined plot:
combined_plot_final <- plot_grid(
  Plot1, Plot2, Plot3,
  ncol = 1,
  nrow = 3,
  align = "v",                # vertical alignment
  rel_heights = c(6, 2.5, 3), # relative heights for each plot
  label_size = 10,
  hjust = -0.1               # this will adjust labels horizontally (optional)
)

print(combined_plot_final)
